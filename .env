VITE_SUPABASE_URL=https://dewbkyxoltoprbfjfhfh.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRld2JreXhvbHRvcHJiZmpmaGZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4Mzg1ODQsImV4cCI6MjA1NzQxNDU4NH0.r5FMOw-SHMEmJJIUgT8kefc13wJF_OBGNm-9pZrnOVM
VITE_CLERK_PUBLISHABLE_KEY=pk_test_ZnJlZS1jb3JnaS0wLmNsZXJrLmFjY291bnRzLmRldiQ




# VITE_SUPABASE_URL=https://dewbkyxoltoprbfjfhfh.supabase.co
# VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRld2JreXhvbHRvcHJiZmpmaGZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4Mzg1ODQsImV4cCI6MjA1NzQxNDU4NH0.r5FMOw-SHMEmJJIUgT8kefc13wJF_OBGNm-9pZrnOVM
        




import { getJobs } from "@/apis/apijobs";
import useFetch from "@/Hooks/useFetch";
import { useSession, useUser } from "@clerk/clerk-react";
import React, { useEffect, useState } from "react";
import { Button, Card, Row, Col } from "react-bootstrap";
import { BarLoader } from "react-spinners";
import supabase from "@/utils/supabase2";
import { Input } from "@/Components/ui/input";

import Jobcard from "@/Components/LandingPage/Jobcard";
const JobListing = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [location, setLocation] = useState("");
  const [company_id, setCompanyId] = useState("");
  const { isLoaded } = useUser();

  const [jobsData, setJobsData] = useState([]);

  const fetchJobs = async () => {
    const { data, error } = await supabase
      .from("jobs")
      .select("* ,companies(name,logo_url)");
    if (error) {
      console.log(error);
    }
    if (data) {
      setJobsData(data);
    }
  };

  useEffect(() => {
    fetchJobs();
  }, []);

  console.log(jobsData);
  const {
    fn: fnJobs,
    data: datajobs,
    loading: loadingJobs,
  } = useFetch(getJobs, {
    location,
    company_id,
    searchQuery,
  });

  console.log(datajobs);

  useEffect(() => {
    fnJobs();
  }, [isLoaded, location, company_id, searchQuery, jobsData]);

  if (!isLoaded) {
    return (
      <BarLoader
        style={{
          height: "5rem",
          width: "100%",
          marginTop: "10rem",
          position: "absolute",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
        }}
      />
    );
  }

  return (
    <>
      <div
        className="pt-30"
        style={{
          backgroundColor: "#3674B5",
          color: "white",
          height: "auto",
          width: "100%",
          textAlign: "center",
        }}
      >
        <b className="text-6xl  font-extrabold ">Latest Jobs</b>
        <div className=" pt-10 grid md:grid-cols-2 lg:grid-cols-3 gap-4">
          {/* <form
          // onSubmit={handleSearch}
          className="h-14 flex flex-row w-full gap-2 items-center mb-3"
        >
          <Input
            type="text"
            placeholder="Search Jobs by Title.."
            name="search-query"
            className="h-full flex-1  px-4 text-md"
          />
          <Button type="submit" className="h-full sm:w-28" variant="blue">
            Search
          </Button>
        </form> */}

          {loadingJobs && (
            <BarLoader
              style={{
                height: "5rem",
                width: "100%",
                marginTop: "10rem",
                position: "absolute",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
            />
          )}

          {jobsData ? (
            jobsData.map((job, index) => (
              <Jobcard
                key={job.id}
                job={job}
                savedInit={job.saved?.length > 0}
              />
            ))
          ) : (
            <b>no jobs</b>
          )}
        </div>
      </div>
    </>
  );
};

export default JobListing;




import supaBaseClient from "@/utils/supabase";

export async function getJobs(token) {
  const supabase = await supaBaseClient(token);
  let query = supabase.from("jobs").select("*");

  // if (location) {
  //   query = query.eq("location", location);
  // }

  // if (company_id) {
  //   query = query.eq("company_id", company_id);
  // }
  // if (searchQuery) {
  //   query = query.ilike("title", `%${searchQuery}%`);
  // }
  const { data, error } = await query;
  console.log(query);
  console.log(data);
  if (error) {
    console.log("error to fetch jobs");
    console.log(error);
  }

  return data;
}

export async function savedJob(token, { location, company_id, searchQuery }) {
  const supabase = await supaBaseClient(token);
  if (alreadySaved) {
    const { data, error: deleteError } = await supabase
      .from("saved_jobs")
      .delete()
      .eq("job_id", saveData.job_id);

    if (deleteError) {
      console.log("error deleting saved job : ", deleteError);
      return null;
    }
    return data;
  } else {
    const { data, error: insertError } = await supabase
      .from("saved_jobs")
      .insert([saveData])
      .select();

    if (insertError) {
      console.log("error fetching  job : ", insertError);
      return null;
    }
    return data;
  }
}




